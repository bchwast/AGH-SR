//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Smarthome;

public interface CoffeeMakerI extends BeverageMakerI
{
    Coffee getCurrentCoffee(com.zeroc.Ice.Current current);

    boolean setCoffee(Coffee coffee, com.zeroc.Ice.Current current)
        throws InvalidCoffeeException;

    Coffee makeCoffee(com.zeroc.Ice.Current current)
        throws WaterUnderflowException;

    java.util.List<CoffeeType> getCoffeeTypes(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Smarthome::BeverageMakerI",
        "::Smarthome::CoffeeMakerI",
        "::Smarthome::DeviceI"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Smarthome::CoffeeMakerI";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCurrentCoffee(CoffeeMakerI obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        Coffee ret = obj.getCurrentCoffee(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Coffee.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setCoffee(CoffeeMakerI obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Coffee iceP_coffee;
        iceP_coffee = Coffee.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.setCoffee(iceP_coffee, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_makeCoffee(CoffeeMakerI obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        Coffee ret = obj.makeCoffee(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Coffee.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCoffeeTypes(CoffeeMakerI obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        java.util.List<CoffeeType> ret = obj.getCoffeeTypes(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        coffeeTypesHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "addWater",
        "getCoffeeTypes",
        "getCurrentCoffee",
        "getState",
        "getWaterLevel",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "makeCoffee",
        "setCoffee",
        "turnOff",
        "turnOn"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return BeverageMakerI._iceD_addWater(this, in, current);
            }
            case 1:
            {
                return _iceD_getCoffeeTypes(this, in, current);
            }
            case 2:
            {
                return _iceD_getCurrentCoffee(this, in, current);
            }
            case 3:
            {
                return DeviceI._iceD_getState(this, in, current);
            }
            case 4:
            {
                return BeverageMakerI._iceD_getWaterLevel(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 9:
            {
                return _iceD_makeCoffee(this, in, current);
            }
            case 10:
            {
                return _iceD_setCoffee(this, in, current);
            }
            case 11:
            {
                return DeviceI._iceD_turnOff(this, in, current);
            }
            case 12:
            {
                return DeviceI._iceD_turnOn(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
